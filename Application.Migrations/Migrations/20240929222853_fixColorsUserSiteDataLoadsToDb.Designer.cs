// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SiteConstructor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240929222853_fixColorsUserSiteDataLoadsToDb")]
    partial class fixColorsUserSiteDataLoadsToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Entities.LocalUser.LocalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalUsers");
                });

            modelBuilder.Entity("Domain.Models.Entities.UserSiteData.UserSiteData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorSchemeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadersFont")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainTextFont")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RemoveLogoBackground")
                        .HasColumnType("bit");

                    b.Property<string>("TelegramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VkLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsersSiteData");
                });

            modelBuilder.Entity("Domain.Models.ValueObjects.SiteData.BackgroundColors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Additional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Main")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Navigation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translucent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserSiteDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserSiteDataId")
                        .IsUnique();

                    b.ToTable("BackgroundColors");
                });

            modelBuilder.Entity("Domain.Models.ValueObjects.SiteData.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageFileBase64String")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserSiteDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserSiteDataId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Domain.Models.ValueObjects.SiteData.TextColors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Additional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Main")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translucent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserSiteDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserSiteDataId")
                        .IsUnique();

                    b.ToTable("TextColors");
                });

            modelBuilder.Entity("Domain.Models.ValueObjects.SiteData.BackgroundColors", b =>
                {
                    b.HasOne("Domain.Models.Entities.UserSiteData.UserSiteData", "UserSiteData")
                        .WithOne("BackgroundColors")
                        .HasForeignKey("Domain.Models.ValueObjects.SiteData.BackgroundColors", "UserSiteDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSiteData");
                });

            modelBuilder.Entity("Domain.Models.ValueObjects.SiteData.Image", b =>
                {
                    b.HasOne("Domain.Models.Entities.UserSiteData.UserSiteData", "UserSiteData")
                        .WithMany("Images")
                        .HasForeignKey("UserSiteDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSiteData");
                });

            modelBuilder.Entity("Domain.Models.ValueObjects.SiteData.TextColors", b =>
                {
                    b.HasOne("Domain.Models.Entities.UserSiteData.UserSiteData", "UserSiteData")
                        .WithOne("TextColors")
                        .HasForeignKey("Domain.Models.ValueObjects.SiteData.TextColors", "UserSiteDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSiteData");
                });

            modelBuilder.Entity("Domain.Models.Entities.UserSiteData.UserSiteData", b =>
                {
                    b.Navigation("BackgroundColors");

                    b.Navigation("Images");

                    b.Navigation("TextColors");
                });
#pragma warning restore 612, 618
        }
    }
}
